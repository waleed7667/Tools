<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Fusion | Modern PDF Merger</title>
    <meta name="description" content="Merge PDF files securely in your browser with our dark-themed PDF merger">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <style>
        :root {
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --accent-primary: #818cf8;
            --accent-secondary: #4f46e5;
            --text-primary: #f8fafc;
            --text-secondary: #94a3b8;
        }

        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
            min-height: 100vh;
        }

        .glass-card {
            background: rgba(15, 23, 42, 0.7);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
        }

        .drop-zone {
            border: 2px dashed var(--accent-primary);
            border-radius: 12px;
            padding: 3rem 1rem;
            text-align: center;
            transition: all 0.3s ease;
            background: var(--bg-secondary);
            position: relative;
        }

        .drop-zone.dragover {
            border-color: #4ade80;
            background: rgba(79, 70, 229, 0.1);
        }

        .file-item {
            background: var(--bg-secondary);
            border-radius: 8px;
            padding: 1rem;
            margin: 0.5rem 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .btn-neon {
            background: linear-gradient(45deg, var(--accent-secondary), var(--accent-primary));
            border: none;
            color: white;
            padding: 0.8rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            transition: opacity 0.3s ease;
        }

        .btn-neon:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 3px solid var(--text-secondary);
            border-top-color: var(--accent-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="d-flex flex-column">
    <main class="container my-auto py-5">
        <div class="glass-card">
            <h1 class="text-center mb-4 display-5 fw-bold">PDF Fusion</h1>

            <!-- File Drop Zone -->
            <div class="drop-zone" id="dropZone">
                <input type="file" id="pdfInput" accept=".pdf" multiple class="d-none">
                <label for="pdfInput" class="btn-neon mb-2">
                    Select PDF Files
                </label>
                <p class="text-secondary mb-0">or drag files here</p>
                <div id="fileError" class="text-danger small mt-2 d-none"></div>
            </div>

            <!-- File List -->
            <div class="file-list mt-4">
                <div id="fileItems"></div>
            </div>

            <!-- Merge Button -->
            <div class="text-center mt-4">
                <button id="mergeBtn" class="btn-neon" disabled>
                    <span id="mergeText">Merge PDFs</span>
                    <div id="loading" class="loading-spinner d-none"></div>
                </button>
            </div>
        </div>
    </main>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"></script>

    <script>
        // DOM Elements
        const pdfInput = document.getElementById('pdfInput');
        const dropZone = document.getElementById('dropZone');
        const fileItems = document.getElementById('fileItems');
        const mergeBtn = document.getElementById('mergeBtn');
        const fileError = document.getElementById('fileError');
        let files = [];

        // File Input Handler
        pdfInput.addEventListener('change', handleFileSelect);

        // Drag and Drop Handlers
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('dragover');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('dragover');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            handleFileSelect(e.dataTransfer);
        });

        // File Handling
        function handleFileSelect(event) {
            const newFiles = event.files || event.target.files;
            if (!newFiles.length) return;

            fileError.classList.add('d-none');
            const validFiles = [];
            
            Array.from(newFiles).forEach(file => {
                if (file.type !== 'application/pdf' && !file.name.toLowerCase().endsWith('.pdf')) {
                    showError('Only PDF files are allowed');
                    return;
                }
                if (file.size > 10 * 1024 * 1024) {
                    showError('File size exceeds 10MB limit');
                    return;
                }
                validFiles.push(file);
            });

            if (validFiles.length > 0) {
                files = [...files, ...validFiles];
                updateFileList();
                mergeBtn.disabled = false;
            }
        }

        // Update File List
        function updateFileList() {
            fileItems.innerHTML = files.map((file, index) => `
                <div class="file-item">
                    <div class="d-flex align-items-center gap-2">
                        <span class="text-primary">${index + 1}.</span>
                        <span>${file.name}</span>
                        <small class="text-secondary">(${formatSize(file.size)})</small>
                    </div>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary" 
                            onclick="moveFile(${index}, 'up')" ${index === 0 ? 'disabled' : ''}>
                            ↑
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" 
                            onclick="moveFile(${index}, 'down')" ${index === files.length - 1 ? 'disabled' : ''}>
                            ↓
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="removeFile(${index})">
                            ×
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // File Operations
        window.moveFile = (index, direction) => {
            const newIndex = direction === 'up' ? index - 1 : index + 1;
            [files[index], files[newIndex]] = [files[newIndex], files[index]];
            updateFileList();
        };

        window.removeFile = (index) => {
            files.splice(index, 1);
            updateFileList();
            if (files.length === 0) mergeBtn.disabled = true;
        };

        // Merge Functionality
        mergeBtn.addEventListener('click', async () => {
            mergeBtn.disabled = true;
            document.getElementById('mergeText').classList.add('d-none');
            document.getElementById('loading').classList.remove('d-none');

            try {
                const mergedPdf = await PDFLib.PDFDocument.create();
                
                for (const file of files) {
                    const arrayBuffer = await file.arrayBuffer();
                    const pdfDoc = await PDFLib.PDFDocument.load(arrayBuffer);
                    const pages = await mergedPdf.copyPages(pdfDoc, pdfDoc.getPageIndices());
                    pages.forEach(page => mergedPdf.addPage(page));
                }

                const mergedBytes = await mergedPdf.save();
                downloadPDF(mergedBytes);
            } catch (error) {
                showError('Error merging files. Please check PDF validity.');
                console.error('Merge error:', error);
            } finally {
                mergeBtn.disabled = false;
                document.getElementById('mergeText').classList.remove('d-none');
                document.getElementById('loading').classList.add('d-none');
            }
        });

        // Utility Functions
        function formatSize(bytes) {
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            if (bytes === 0) return '0 Byte';
            const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
            return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];
        }

        function downloadPDF(data) {
            const blob = new Blob([data], { type: 'application/pdf' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `merged-${Date.now()}.pdf`;
            link.click();
        }

        function showError(message) {
            fileError.textContent = message;
            fileError.classList.remove('d-none');
            setTimeout(() => fileError.classList.add('d-none'), 5000);
        }
    </script>
</body>
</html>
